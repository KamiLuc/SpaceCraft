#version 330

in vec4 vertexColor;
in vec3 normal;
in vec3 fragPos;

out vec4 color;

struct DirectionalLight 
{
	vec3 color;
	float ambientIntensity;
	vec3 direction;
	float diffuseIntensity;
};

struct Material
{
	float specularIntensity;
	float shininess;
};

uniform DirectionalLight directionalLight;
uniform Material material;
uniform vec3 cameraPosition;

void main()
{

	vec4 ambientColor = vec4(directionalLight.color, 1.0f) * directionalLight.ambientIntensity;
	
	float diffuseFactor = max(dot(normalize(normal), normalize(directionalLight.direction)), 0.0f);
	vec4 diffuseColor = vec4(directionalLight.color, 1.0f) * directionalLight.diffuseIntensity * diffuseFactor;
	
	vec4 specularColor = vec4(0, 0, 0, 0);
	
	if(diffuseFactor > 0.0f)
	{
		vec3 fragToCamera = normalize(cameraPosition - fragPos);
		vec3 reflectedVertex = normalize(reflect(directionalLight.direction, normalize(normal)));
		
		float specularFactor = dot(fragToCamera, reflectedVertex);
		if(specularFactor > 0.0f)
		{
			specularFactor = pow(specularFactor, material.shininess);
			specularColor = vec4(directionalLight.color * material.specularIntensity * specularFactor, 1.0f);
		}
	}
	
	color = vertexColor * (ambientColor + diffuseColor + specularColor);

}