#version 330

layout(location = 0) in vec3 pos;
layout(location = 3) in vec4 col;
layout(location = 2) in vec3 norm;

uniform mat4 model;
uniform mat4 projection;
uniform mat4 view;

out vec4 vertexColor;
out vec2 texCoord;
out vec3 normal;
out vec3 fragPos;

void main()
{
	gl_Position = projection * view * model * vec4(pos, 1.0f);
	
	vertexColor = col;

	//in 4 is translation, not needed - transpose + inverse to invert scaling process (non uniform scaling)
	normal = mat3(transpose(inverse(model))) * norm;

	fragPos = (model * vec4(pos, 1.0f)).xyz;

}